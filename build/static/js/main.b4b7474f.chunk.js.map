{"version":3,"sources":["Meter.js","Tuner.js","App.js","index.js"],"names":["Meter","props","isOnPitch","cents","stickRotation","transform","backgroundColor","className","id","style","Tuner","frequency","nthNote","Math","round","log","octave","parseInt","standardFrequency","pow","centDifference","note","roundedFrequency","Number","EPSILON","isNaN","App","useState","hasMicPerm","setHasMicPerm","currentFrequency","setCurrentFrequency","useEffect","navigator","mediaDevices","getUserMedia","then","rawStream","processStream","catch","err","alert","name","a","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","createMediaStreamSource","connect","nyquist","sampleRate","bufferLength","frequencyBinCount","dataArray","Float32Array","getFloatFrequencyData","loudest","loudestIndex","i","currentLoudness","sleep","ms","Promise","resolve","setTimeout","dotExpansion","dotExpansionEmphasis","class","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAsBeA,EAtBA,SAAAC,GACX,IAAMC,EAAYD,EAAME,MAAQ,IAAMF,EAAME,OAAS,GAC/CC,EAAgB,CAClBC,UAAU,UAAD,OAAYJ,EAAME,MAAlB,QACTG,gBAAiBJ,EAAY,qBAAuB,6BAExD,OACI,sBAAKK,UAAU,QAAf,UACI,qBAAKC,GAAG,WAAR,iBACA,sBAAKD,UAAU,kBAAf,UAEI,qBAAKA,UAAU,QAAQE,MAAOL,IAE9B,qBAAKI,GAAG,cAGZ,qBAAKA,GAAG,YAAR,sBC8BGE,MA5Cf,YAA+B,IAAdC,EAAa,EAAbA,UAkBTC,EAAUC,KAAKC,MAAYD,KAAKE,IAAIJ,EAF1B,KAEiDE,KAAKE,IAAI,GAA/C,IADF,GAGnBC,EAASC,SAASL,EAAU,IAAM,EAClCM,EALU,IAKoBL,KAAKM,IAAI,GAAIP,EAJxB,IAIsD,IACzEQ,EAAiBP,KAAKC,MACzB,KAAOD,KAAKE,IAAIJ,EAAYO,GAC7BL,KAAKE,IAAI,IAELM,EAzBa,CACjB,IACA,UACA,IACA,UACA,IACA,IACA,UACA,IACA,UACA,IACA,UACA,KAasBT,EAAU,IAC5BU,EAAmBT,KAAKC,MAAqC,KAA9BH,EAAYY,OAAOC,UAAkB,IAE1E,OACE,sBAAKjB,UAAU,QAAf,UACE,cAAC,EAAD,CAAOJ,MAAOiB,IACd,sBAAKb,UAAU,aAAf,UACGkB,MAAMT,GAAU,mDAA6B,mCAAMK,EAAN,IAAY,8BAAML,OAC/DS,MAAML,GAAkB,KAAO,qBAAIb,UAAU,kBAAd,UAAiCa,EAAjC,aACT,OAAtBE,EAA6B,KAAO,qBAAIf,UAAU,YAAd,UAA2Be,EAA3B,gBCkC9BI,MApEf,WACE,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgDF,mBAAS,IAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAEAC,qBAAU,WACHJ,GACHK,UAAUC,aAAaC,aAAa,CAAE,OAAS,IAC5CC,MAAK,SAAAC,GACJR,GAAc,GACdS,EAAcD,MAEfE,OAAM,SAAAC,GACLC,MAAM,iCAAD,OAAkCD,EAAIE,aAKnD,IAAMJ,EAAa,uCAAG,WAAMD,GAAN,+BAAAM,EAAA,sDACdC,EAAW,IAAKC,OAAOC,cAAgBD,OAAOE,qBAC9CC,EAAWJ,EAASK,kBACjBC,QAAU,MACJN,EAASO,wBAAwBd,GACzCe,QAAQJ,GACTK,EAAUT,EAASU,WAAa,EAChCC,EAAeP,EAASQ,kBACxBC,EAAY,IAAIC,aAAaH,GARf,OAalB,IAHAP,EAASW,sBAAsBF,GAC3BG,GAAW,GACXC,GAAgB,EACXC,EAAI,EAAGA,EAAIP,EAAcO,KAC5BC,EAAkBN,EAAUK,IACVF,IACpBA,EAAUG,EACVF,EAAeC,GAjBD,OAqBlB/B,EADkB8B,GAAgBR,EAAUE,IApB1B,UAsBZS,EAAM,IAtBM,mEAAH,sDA0BbA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAK9CI,EAAe,CACnBhE,UAAU,SAAD,OAAWyB,EAAmB,IAAO,EAArC,MAGLwC,EAAuB,CAC3BjE,UAAU,SAAD,OAAWyB,EAAmB,IAAO,EAArC,MAGb,OACE,sBAAKvB,UAAU,MAAf,UACE,sBAAMgE,MAAM,QACZ,sBAAMA,MAAM,aAAa9D,MAAO4D,IAChC,sBAAME,MAAM,kBAAkB9D,MAAO6D,IAErC,cAAC,EAAD,CAAO3D,UAAWmB,QC7DtB0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b4b7474f.chunk.js","sourcesContent":["const Meter = (props => {\r\n    const isOnPitch = props.cents < 15 && props.cents > -15\r\n    const stickRotation = {\r\n        transform: `rotate(${props.cents}deg)`,\r\n        backgroundColor: isOnPitch ? 'rgb(144, 214, 155)' : 'rgb(252, 249, 246, 0.527)'\r\n    }\r\n    return (\r\n        <div className='meter'>\r\n            <div id='low-text'>low</div>\r\n            <div className='meter-container'>\r\n\r\n                <div className='stick' style={stickRotation}></div>\r\n\r\n                <div id='circle'></div>\r\n\r\n            </div>\r\n            <div id='high-text'>high</div>\r\n        </div>\r\n    )\r\n}\r\n)\r\n\r\nexport default Meter;\r\n\r\n\r\n","import Meter from './Meter';\r\n\r\nfunction Tuner({ frequency }) {\r\n  const notesArray = [\r\n    \"C\",\r\n    \"C♯\",\r\n    \"D\",\r\n    \"D♯\",\r\n    \"E\",\r\n    \"F\",\r\n    \"F♯\",\r\n    \"G\",\r\n    \"G♯\",\r\n    \"A\",\r\n    \"A♯\",\r\n    \"B\",\r\n  ];\r\n\r\n  const middleA = 440;\r\n  const middleAPlacement = 69;\r\n  const nthNote = Math.round(12 * (Math.log(frequency / middleA) / Math.log(2))) + middleAPlacement;\r\n  // octave weird\r\n  const octave = parseInt(nthNote / 12) - 1\r\n  const standardFrequency = middleA * Math.pow(2, (nthNote - middleAPlacement) / 12);\r\n  const centDifference = Math.round(\r\n    (1200 * Math.log(frequency / standardFrequency)) /\r\n    Math.log(2)\r\n  );\r\n  const note = notesArray[nthNote % 12];\r\n  const roundedFrequency = Math.round((frequency + Number.EPSILON) * 100) / 100;\r\n\r\n  return (\r\n    <div className='tuner'>\r\n      <Meter cents={centDifference} />\r\n      <div className='tuner-info'>\r\n        {isNaN(octave) ? <h1>Play something :)</h1> : <h1> {note} <sub>{octave}</sub></h1>}\r\n        {isNaN(centDifference) ? null : <h2 className='frequency-cents'>{centDifference} Cents</h2>}\r\n        {roundedFrequency === -1.46 ? null : <h2 className='frequency'>{roundedFrequency} Hz</h2>}\r\n\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tuner;","import React, { useState, useEffect } from 'react';\nimport Tuner from './Tuner';\n\nfunction App() {\n  const [hasMicPerm, setHasMicPerm] = useState(false)\n  const [currentFrequency, setCurrentFrequency] = useState(\"\")\n\n  useEffect(() => {\n    if (!hasMicPerm) {\n      navigator.mediaDevices.getUserMedia({ \"audio\": true })\n        .then(rawStream => {\n          setHasMicPerm(true)\n          processStream(rawStream)\n        })\n        .catch(err => {\n          alert(`Does not have mic permission: ${err.name}`)\n        });\n    }\n  });\n\n  const processStream = async rawStream => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const analyser = audioCtx.createAnalyser();\n    analyser.fftSize = 32768;\n    const stream = audioCtx.createMediaStreamSource(rawStream);\n    stream.connect(analyser);\n    const nyquist = audioCtx.sampleRate / 2;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Float32Array(bufferLength);\n    while (true) {\n      analyser.getFloatFrequencyData(dataArray);\n      let loudest = -70;\n      let loudestIndex = -1;\n      for (let i = 0; i < bufferLength; i++) {\n        let currentLoudness = dataArray[i];\n        if (currentLoudness > loudest) {\n          loudest = currentLoudness;\n          loudestIndex = i;\n        }\n      }\n      const frequency = loudestIndex * (nyquist / bufferLength)\n      setCurrentFrequency(frequency)\n      await sleep(10);\n    }\n  }\n\n  const sleep = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n\n\n  const dotExpansion = {\n    transform: `scale(${currentFrequency / 2000 + 1})`\n  }\n\n  const dotExpansionEmphasis = {\n    transform: `scale(${currentFrequency / 1000 + 1})`\n  }\n\nreturn (\n  <div className=\"App\">\n    <span class=\"dot\"></span>\n    <span class=\"dot-tuning\" style={dotExpansion}></span>\n    <span class=\"dot-tuning-more\" style={dotExpansionEmphasis}></span>\n\n    <Tuner frequency={currentFrequency} />\n  </div>\n);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}